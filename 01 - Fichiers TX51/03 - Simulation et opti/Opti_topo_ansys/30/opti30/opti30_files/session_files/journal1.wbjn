# encoding: utf-8
# 2024 R1
SetScriptVersion(Version="24.1.144")
template1 = GetTemplate(TemplateName="Geometry")
system1 = template1.CreateSystem()
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.SetFile(FilePath="C:/Users/fgley/Downloads/NonCleanGeometry.scdoc")
template2 = GetTemplate(
    TemplateName="Static Structural",
    Solver="ANSYS")
system2 = template2.CreateSystem(
    Position="Right",
    RelativeTo=system1)
geometryComponent1 = system2.GetComponent(Name="Geometry")
geometryComponent2 = system1.GetComponent(Name="Geometry")
geometryComponent1.ReplaceWithShare(
    TargetSystem=system2,
    ComponentToShare=geometryComponent2,
    SourceSystem=system1)
engineeringDataComponent1 = system2.GetComponent(Name="Engineering Data")
modelComponent1 = system2.GetComponent(Name="Model")
system3 = template2.CreateSystem(
    ComponentsToShare=[engineeringDataComponent1, geometryComponent1, modelComponent1],
    Position="Right",
    RelativeTo=system2)
engineeringDataComponent2 = system3.GetComponent(Name="Engineering Data")
geometryComponent3 = system3.GetComponent(Name="Geometry")
modelComponent2 = system3.GetComponent(Name="Model")
system4 = template2.CreateSystem(
    ComponentsToShare=[engineeringDataComponent2, geometryComponent3, modelComponent2],
    Position="Right",
    RelativeTo=system3)
engineeringDataComponent3 = system4.GetComponent(Name="Engineering Data")
geometryComponent4 = system4.GetComponent(Name="Geometry")
modelComponent3 = system4.GetComponent(Name="Model")
system5 = template2.CreateSystem(
    ComponentsToShare=[engineeringDataComponent3, geometryComponent4, modelComponent3],
    Position="Right",
    RelativeTo=system4)
modelComponent1.Refresh()
model1 = system2.GetContainer(ComponentName="Model")
model1.Edit()
engineeringData1 = system2.GetContainer(ComponentName="Engineering Data")
matl1 = engineeringData1.CreateMaterial(Name="Resine")
matlProp1 = matl1.CreateProperty(
    Name="Density",
    Qualifiers={"Definition": "", "Behavior": ""})
matlProp1.SetData(
    SheetName="Density",
    SheetQualifiers={"Definition": "", "Behavior": ""},
    Index=-1,
    Variables=["Temperature"],
    Values=[["20 [C]"]])
matlProp1.SetData(
    SheetName="Density",
    SheetQualifiers={"Definition": "", "Behavior": ""},
    Variables=["Density"],
    Values=[["1110 [kg m^-3]"]])
matlProp2 = matl1.CreateProperty(
    Name="Elasticity",
    Behavior="Isotropic",
    Qualifiers={"Definition": "", "Behavior": "Isotropic"})
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Index=-1,
    Variables=["Temperature"],
    Values=[["20 [C]"]])
matlProp2.BeginBatchUpdate()
matlProp2.SetVariableProperty(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    VariableName="Young's Modulus",
    Property="Unit",
    Value="MPa")
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Variables=["Young's Modulus"],
    Values=[["7.8886090522101181E-31 [MPa]"]])
matlProp2.EndBatchUpdate()
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Variables=["Young's Modulus"],
    Values=[["25 [MPa]"]])
matlProp2.SetData(
    SheetName="Elasticity",
    SheetQualifiers={"Definition": "", "Behavior": "Isotropic", "Derive from": "Young's Modulus and Poisson's Ratio"},
    Variables=["Poisson's Ratio"],
    Values=[["0.4"]])
modelComponent1.Refresh()
model1.Edit()
Save(Overwrite=True)
